#ifdef VERTEX

attribute vec3 in_Position;
attribute vec4 in_Color;
attribute vec2 in_TexCoord;
attribute vec3 in_Normal;
attribute vec3 in_Tangent;
attribute vec3 in_Bitangent;

uniform mat4 in_Projection;
uniform mat4 in_View;
uniform mat4 in_Model;
uniform mat4 in_Animate;

varying vec4 ex_Color;
varying vec2 ex_TexCoord;
varying vec3 ex_FragPos;
varying mat3 ex_TBN;

void main()
{
	mat3 transform = in_Model * in_Animate;
	gl_Position = in_Projection * in_View * transform * vec4(in_Position, 1.0);
	ex_Color = in_Color;
	ex_TexCoord = in_TexCoord;

	vec3 T = normalize(mat3(transform) * in_Tangent);
	vec3 B = normalize(mat3(transform) * in_Bitangent);
	vec3 N = normalize(mat3(transform) * in_Normal);
	ex_TBN = mat3(T, B, N);

	ex_FragPos = vec3(in_Model * vec4(in_Position, 1.0));
}

#endif

#ifdef FRAGMENT

out vec3 g_Position;
out vec3 g_Normal;
out vec4 g_AlbedoSpec;

uniform sampler2D in_Texture;
uniform sampler2D in_NormMap;
uniform sampler2D in_MetalMap;
uniform sampler2D in_RoughMap;
uniform sampler2D in_AoMap;

varying vec4 ex_Color;
varying vec2 ex_TexCoord;
varying vec3 ex_FragPos;
varying mat3 ex_TBN;

void main()
{
	g_Position = ex_FragPos;

	vec3 normal = texture(in_NormMap, ex_TexCoord).rgb;

	g_Normal = normalize(ex_TBN * normalize(normal * 2.0 - 1.0));

	g_AlbedoSpec.rgb = texture(in_Texture, ex_TexCoord).rgb;

	g_AlbedoSpec.a = texture(in_MetalMap, ex_TexCoord).r;
}

#endif