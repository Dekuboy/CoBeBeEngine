#ifdef VERTEX

attribute vec3 in_Position;
attribute vec4 in_Color;
attribute vec2 in_TexCoord;

varying vec2 ex_TexCoord;

void main()
{
	gl_Position = vec4(in_Position, 1.0);
	ex_TexCoord = in_TexCoord;
}

#endif

#ifdef FRAGMENT

uniform sampler2D in_GPosition;
uniform sampler2D in_GNormal;
uniform sampler2D in_GAlbedoSpec;

uniform sampler2D in_DepthBuff;
uniform samplerCube in_DepthMap[10];

uniform vec3 in_Ambient;
uniform vec3 in_LightDir;
uniform vec3 in_GlobalLightCol;
uniform int in_PointTotal;
uniform vec3 in_LightPos[10];
uniform vec3 in_LightCol[10];
uniform float in_FarPlane[10];

uniform vec3 in_ViewPos;
uniform mat4 in_GlobalLightSpace;

varying vec2 ex_TexCoord;

vec4 lightSpaceFragPos;
vec3 fragPos;
float gSpec;

// array of random offset direction for sampling 2D
vec2 poissonDisk[16] = vec2[]( 
   vec2( -0.94201624, -0.39906216 ), 
   vec2( 0.94558609, -0.76890725 ), 
   vec2( -0.094184101, -0.92938870 ), 
   vec2( 0.34495938, 0.29387760 ), 
   vec2( -0.91588581, 0.45771432 ), 
   vec2( -0.81544232, -0.87912464 ), 
   vec2( -0.38277543, 0.27676845 ), 
   vec2( 0.97484398, 0.75648379 ), 
   vec2( 0.44323325, -0.97511554 ), 
   vec2( 0.53742981, -0.47373420 ), 
   vec2( -0.26496911, -0.41893023 ), 
   vec2( 0.79197514, 0.19090188 ), 
   vec2( -0.24188840, 0.99706507 ), 
   vec2( -0.81409955, 0.91437590 ), 
   vec2( 0.19984126, 0.78641367 ), 
   vec2( 0.14383161, -0.14100790 ) 
);

// array of offset direction for sampling 3D
vec3 gridSamplingDisk[20] = vec3[]
(
   vec3(1, 1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1, 1,  1), 
   vec3(1, 1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1, 1, -1),
   vec3(1, 1,  0), vec3( 1, -1,  0), vec3(-1, -1,  0), vec3(-1, 1,  0),
   vec3(1, 0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1, 0, -1),
   vec3(0, 1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0, 1, -1)
);

// Returns a random number based on a vec3 and an int.
float random(vec3 seed, int i){
	vec4 seed4 = vec4(seed,i);
	float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
	return fract(sin(dot_product) * 43758.5453);
}

float pcfGlobalShadow(vec3 _projCoords, float _bias)
{
	float shadow = 0.0;
	float objectDepth = _projCoords.z;
	vec2 texelSize = 1.0 / textureSize(in_DepthBuff, 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(in_DepthBuff, _projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += objectDepth - _bias > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	return shadow / 9.0;
}

float spsGlobalShadow(vec3 _projCoords, float _bias)
{
	float shadow = 0.0;
	float objectDepth = _projCoords.z;		// Sample the shadow map 4 times
	for (int i=0;i<4;i++)
	{
		int index = int(16.0*random(gl_FragCoord.xyy, i))%16;
		float spsDepth = texture(in_DepthBuff, _projCoords.xy + poissonDisk[index] / 700).r;
		shadow += objectDepth - _bias > spsDepth ? 0.2 : 0.0;
	}
	return shadow;
}

vec3 getGlobalLighting(vec3 _norm, vec3 _viewDir, float _viewDistance)
{
	vec3 lightDir = in_LightDir;

	float diff = max(dot(_norm, lightDir), 0.0);
	vec3 diffuse = diff * vec3(in_GlobalLightCol);

	vec3 halfDir = normalize(lightDir + _viewDir);
	float spec = pow(max(dot(_viewDir, halfDir), 0.0), 16);

	vec3 specular = spec * gSpec * vec3(in_GlobalLightCol);

	// check if position is in shadow
	vec3 projCoords = lightSpaceFragPos.xyz / lightSpaceFragPos.w;
	projCoords = projCoords * 0.5 + 0.5;
	float shadow = 0.0;
	if(projCoords.z > 1.0)
	{
        	projCoords.z = 1.0;
	}
//	else
//	{
		
		float bias = max(0.05 * (1.0 - dot(_norm, lightDir)), 0.005); 
		bias = min(0.05 * tan(dot(_norm, lightDir)), bias);
		//vec2 texelSize = 1.0 / textureSize(in_DepthMap, 0);
		
		shadow = spsGlobalShadow(projCoords, bias);
//	}

	return (1.0 - shadow) * (diffuse + specular);
}

float pcfPointShadow(float _viewDistance, vec3 _fragToLight, int _id)
{
	float shadow = 0.0;
	float bias = 0.15;
	int samples = 20;

	float currentDepth = length(_fragToLight);

    float diskRadius = (1.0 + (_viewDistance / in_FarPlane[_id])) / 25.0;
    for(int i = 0; i < samples; ++i)
    {
        float closestDepth = texture(in_DepthMap[_id], _fragToLight + gridSamplingDisk[i] * diskRadius).r;
        closestDepth *= in_FarPlane[_id];   // undo mapping [0;1]
        if(currentDepth - bias > closestDepth)
            shadow += 1.0;
    }
    shadow /= float(samples);
        
    return shadow;
}

vec3 getPointShadow(vec3 _norm, vec3 _viewDir, float _viewDistance, int _id)
{
	vec3 lightDir = normalize(in_LightPos[_id] - fragPos);

	float diff = max(dot(_norm, lightDir), 0.0);
	vec3 diffuse = diff * vec3(in_LightCol[_id]);

	vec3 halfDir = normalize(lightDir + _viewDir);
	float spec = pow(max(dot(_viewDir, halfDir), 0.0), 16);

	vec3 specular = spec * gSpec * vec3(in_LightCol[_id]);

	// check if position is in shadow
	vec3 fragToLight = fragPos - in_LightPos[_id];
	
	float shadow = pcfPointShadow(_viewDistance, fragToLight, _id);

	return (1.0 - shadow) * (diffuse + specular);
}

void main()
{
	// retrieve data from gbuffer
	fragPos = texture(in_GPosition, ex_TexCoord).rgb;
	vec3 norm = texture(in_GNormal, ex_TexCoord).rgb;
	vec3 tex = texture(in_GAlbedoSpec, ex_TexCoord).rgb;
	gSpec = texture(in_GAlbedoSpec, ex_TexCoord).a;

	lightSpaceFragPos = in_GlobalLightSpace * vec4(fragPos, 1.0);

	vec3 viewDir = normalize(in_ViewPos - fragPos);
	float viewDistance = length(in_ViewPos.xyz - fragPos);
	vec3 light = getGlobalLighting(norm, viewDir, viewDistance);

	for (int i = 0; i < in_PointTotal; i++)
	{
		light += getPointShadow(norm, viewDir, viewDistance, i);
	}

	light += in_Ambient;
	gl_FragColor = vec4(tex, 1) * vec4(light, 1);
}

#endif