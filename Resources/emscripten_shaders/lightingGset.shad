#ifdef VERTEX

attribute vec3 in_Position;
attribute vec4 in_Color;
attribute vec2 in_TexCoord;

varying mediump vec2 ex_TexCoord;

void main()
{
	gl_Position = vec4(in_Position, 1.0);
	ex_TexCoord = in_TexCoord;
}

#endif

#ifdef FRAGMENT

uniform sampler2D in_GPosition;
uniform sampler2D in_GNormal;
uniform sampler2D in_GAlbedoSpec;

uniform sampler2D in_DepthBuff;
uniform samplerCube in_DepthMap[10];
uniform mediump float in_DepthSize;

uniform mediump vec3 in_Ambient;
uniform mediump vec3 in_LightDir;
uniform mediump vec3 in_GlobalLightCol;
uniform lowp int in_PointTotal;
uniform mediump vec3 in_LightPos[10];
uniform mediump vec3 in_LightCol[10];
uniform mediump float in_FarPlane[10];

uniform mediump vec3 in_ViewPos;
uniform mediump mat4 in_GlobalLightSpace;

varying mediump vec2 ex_TexCoord;

mediump vec4 lightSpaceFragPos;
mediump vec3 fragPos;
mediump float gSpec;

// Array functions
mediump float depthMap(int _id, vec3 _texCoord)
{
	if(_id == 0) return textureCube(in_DepthMap[0], _texCoord).r;
	else if(_id == 1) return textureCube(in_DepthMap[1], _texCoord).r;
	else if(_id == 2) return textureCube(in_DepthMap[2], _texCoord).r;
	else if(_id == 3) return textureCube(in_DepthMap[3], _texCoord).r;
	else if(_id == 4) return textureCube(in_DepthMap[4], _texCoord).r;
	else if(_id == 5) return textureCube(in_DepthMap[5], _texCoord).r;
	else if(_id == 6) return textureCube(in_DepthMap[6], _texCoord).r;
	else if(_id == 7) return textureCube(in_DepthMap[7], _texCoord).r;
	else if(_id == 8) return textureCube(in_DepthMap[8], _texCoord).r;
	else if(_id == 9) return textureCube(in_DepthMap[9], _texCoord).r;
	return 1.0;
}

mediump vec3 lightPos(int _id)
{
	if(_id == 0) return in_LightPos[0];
	else if(_id == 1) return in_LightPos[1];
	else if(_id == 2) return in_LightPos[2];
	else if(_id == 3) return in_LightPos[3];
	else if(_id == 4) return in_LightPos[4];
	else if(_id == 5) return in_LightPos[5];
	else if(_id == 6) return in_LightPos[6];
	else if(_id == 7) return in_LightPos[7];
	else if(_id == 8) return in_LightPos[8];
	else if(_id == 9) return in_LightPos[9];

	return vec3(0);
}

mediump vec3 lightCol(int _id)
{
	if(_id == 0) return in_LightCol[0];
	else if(_id == 1) return in_LightCol[1];
	else if(_id == 2) return in_LightCol[2];
	else if(_id == 3) return in_LightCol[3];
	else if(_id == 4) return in_LightCol[4];
	else if(_id == 5) return in_LightCol[5];
	else if(_id == 6) return in_LightCol[6];
	else if(_id == 7) return in_LightCol[7];
	else if(_id == 8) return in_LightCol[8];
	else if(_id == 9) return in_LightCol[9];

	return vec3(0);
}

mediump float farPlane(int _id)
{
	if(_id == 0) return in_FarPlane[0];
	else if(_id == 1) return in_FarPlane[1];
	else if(_id == 2) return in_FarPlane[2];
	else if(_id == 3) return in_FarPlane[3];
	else if(_id == 4) return in_FarPlane[4];
	else if(_id == 5) return in_FarPlane[5];
	else if(_id == 6) return in_FarPlane[6];
	else if(_id == 7) return in_FarPlane[7];
	else if(_id == 8) return in_FarPlane[8];
	else if(_id == 9) return in_FarPlane[9];

	return 0.0;
}

// array of random offset direction for sampling 2D
mediump vec2 diskSample(int _id)
{
	if(_id == 0) return		 vec2( -0.94201624, -0.39906216 );
	else if(_id == 1) return vec2( 0.94558609, -0.76890725 );
	else if(_id == 2) return vec2( -0.094184101, -0.92938870 );
	else if(_id == 3) return vec2( 0.34495938, 0.29387760 );
	else if(_id == 4) return vec2( -0.91588581, 0.45771432 );
	else if(_id == 5) return vec2( -0.81544232, -0.87912464 );
	else if(_id == 6) return vec2( -0.38277543, 0.27676845 );
	else if(_id == 7) return vec2( 0.97484398, 0.75648379 );
	else if(_id == 8) return vec2( 0.44323325, -0.97511554 );
	else if(_id == 9) return vec2( 0.53742981, -0.47373420 );
	else if(_id == 10) return vec2( -0.26496911, -0.41893023 );
	else if(_id == 11) return vec2( 0.79197514, 0.19090188 );
	else if(_id == 12) return vec2( -0.24188840, 0.99706507 );
	else if(_id == 13) return vec2( -0.81409955, 0.91437590 );
	else if(_id == 14) return vec2( 0.19984126, 0.78641367 );
	else if(_id == 15) return vec2( 0.14383161, -0.14100790 );

	return vec2(0);
}

// array of offset direction for sampling 3D
mediump vec3 gridSample(int _id)
{
	if(_id == 0) return		  vec3(1, 1,  1);
	else if(_id == 1) return  vec3( 1, -1,  1);
	else if(_id == 2) return  vec3(-1, -1,  1);
	else if(_id == 3) return  vec3(-1, 1,  1); 
	else if(_id == 4) return  vec3(1, 1, -1);
	else if(_id == 5) return  vec3( 1, -1, -1);
	else if(_id == 6) return  vec3(-1, -1, -1);
	else if(_id == 7) return  vec3(-1, 1, -1);
	else if(_id == 8) return  vec3(1, 1,  0);
	else if(_id == 9) return  vec3( 1, -1,  0);
	else if(_id == 10) return vec3(-1, -1,  0);
	else if(_id == 11) return vec3(-1, 1,  0);
	else if(_id == 12) return vec3(1, 0,  1);
	else if(_id == 13) return vec3(-1,  0,  1);
	else if(_id == 14) return vec3( 1,  0, -1);
	else if(_id == 15) return vec3(-1, 0, -1);
	else if(_id == 16) return vec3(0, 1,  1);
	else if(_id == 17) return vec3( 0, -1,  1);
	else if(_id == 18) return vec3( 0, -1, -1);
	else if(_id == 19) return vec3( 0, 1, -1);

	return vec3(0);
}

// Returns a random number based on a vec3 and an int.
mediump float random(vec3 seed, int i){
	mediump vec4 seed4 = vec4(seed,i);
	mediump float dot_product = dot(seed4, vec4(12.9898,78.233,45.164,94.673));
	return fract(sin(dot_product) * 43758.5453);
}

mediump float pcfGlobalShadow(vec3 _projCoords, float _bias)
{
	mediump float shadow = 0.0;
	mediump float objectDepth = _projCoords.z;
	mediump vec2 texelSize = vec2(1,1) / in_DepthSize;
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			mediump float pcfDepth = texture2D(in_DepthBuff, _projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += objectDepth - _bias > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	return shadow / 9.0;
}

/*mediump float spsGlobalShadow(vec3 _projCoords, float _bias)
{
	mediump float shadow = 0.0;
	mediump float objectDepth = _projCoords.z;		// Sample the shadow map 4 times
	for (int i=0;i<4;i++)
	{
		lowp int index = int(16.0*random(gl_FragCoord.xyy, i))%16;
		mediump float spsDepth = texture(in_DepthBuff, _projCoords.xy + diskSample(index) / 700).r;
		shadow += objectDepth - _bias > spsDepth ? 0.2 : 0.0;
	}
	return shadow;
}*/

mediump vec3 getGlobalLighting(vec3 _norm, vec3 _viewDir, float _viewDistance)
{
	mediump vec3 lightDir = in_LightDir;

	mediump float diff = max(dot(_norm, lightDir), 0.0);
	mediump vec3 diffuse = diff * vec3(in_GlobalLightCol);

	mediump vec3 halfDir = normalize(lightDir + _viewDir);
	mediump float spec = pow(max(dot(_viewDir, halfDir), 0.0), 16.0);

	mediump vec3 specular = spec * gSpec * vec3(in_GlobalLightCol);

	// check if position is in shadow
	mediump vec3 projCoords = lightSpaceFragPos.xyz / lightSpaceFragPos.w;
	projCoords = projCoords * 0.5 + 0.5;
	mediump float shadow = 0.0;
	if(projCoords.z > 1.0)
	{
        	projCoords.z = 1.0;
	}
//	else
//	{
		
		mediump float bias = max(0.05 * (1.0 - dot(_norm, lightDir)), 0.005); 
		bias = min(0.05 * tan(dot(_norm, lightDir)), bias);
		
		shadow = pcfGlobalShadow(projCoords, bias);
//	}

	return (1.0 - shadow) * (diffuse + specular);
}

mediump float pcfPointShadow(float _viewDistance, vec3 _fragToLight, int _id)
{
	mediump float farp = farPlane(_id);
	mediump float shadow = 0.0;
	mediump float bias = 0.15;

	mediump float currentDepth = length(_fragToLight);

	mediump float diskRadius = (1.0 + (_viewDistance / farp)) / 25.0;
	mediump float closestDepth;
	for(int i = 0; i < 20; ++i)
	{
		closestDepth = depthMap(_id, _fragToLight + gridSample(i) * diskRadius);
        	closestDepth *= farp;   // undo mapping [0;1]
		if(currentDepth - bias > closestDepth) shadow += 1.0;
	}
	shadow /= 20.0;
	return shadow;
}

mediump vec3 getPointShadow(vec3 _norm, vec3 _viewDir, float _viewDistance, int _id)
{
	mediump vec3 position = lightPos(_id);
	mediump vec3 lightDir = normalize(position - fragPos);

	mediump float diff = max(dot(_norm, lightDir), 0.0);
	mediump vec3 colour = lightCol(_id);
	mediump vec3 diffuse = diff * colour;

	mediump vec3 halfDir = normalize(lightDir + _viewDir);
	mediump float spec = pow(max(dot(_viewDir, halfDir), 0.0), 16.0);

	mediump vec3 specular = spec * gSpec * colour;

	// check if position is in shadow
	mediump vec3 fragToLight = fragPos - position;
	
	mediump float shadow = pcfPointShadow(_viewDistance, fragToLight, _id);

	return (1.0 - shadow) * (diffuse + specular);
}

void main()
{
	// retrieve data from gbuffer
	fragPos = texture2D(in_GPosition, ex_TexCoord).rgb;
	mediump vec3 norm = texture2D(in_GNormal, ex_TexCoord).rgb;
	mediump vec3 tex = texture2D(in_GAlbedoSpec, ex_TexCoord).rgb;
	gSpec = texture2D(in_GAlbedoSpec, ex_TexCoord).a;

	lightSpaceFragPos = in_GlobalLightSpace * vec4(fragPos, 1.0);

	mediump vec3 viewDir = normalize(in_ViewPos - fragPos);
	mediump float viewDistance = length(in_ViewPos.xyz - fragPos);
	mediump vec3 light = getGlobalLighting(norm, viewDir, viewDistance);

	for (int i = 0; i < 10; i++)
	{
		if(i == in_PointTotal) break;
		light += getPointShadow(norm, viewDir, viewDistance, i);
	}

	light += in_Ambient;
	gl_FragColor = vec4(tex, 1) * vec4(light, 1);
}

#endif